// Generated by CoffeeScript 1.3.3

/*
Knockout Kinetic plugin version 0.1.3
Copyright 2012 Christopher Currie - https://github.com/christophercurrie
License: MIT (http://www.opensource.org/licenses/mit-license.php)
*/


(function() {
  var __hasProp = {}.hasOwnProperty;

  (function(factory) {
    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {
      return factory(require('knockout'), exports);
    } else if (typeof define === 'function' && define['amd']) {
      return define(['knockout', 'exports'], factory);
    } else {
      return factory(ko, ko.kinetic = {});
    }
  })(function(ko, exports) {
    var bindingName, ctor, expandConfig, makeBindingHandler, nodeFactory, nodeType;
    expandConfig = function(config) {
      var key, result, value, _ref;
      result = {};
      _ref = ko.utils.unwrapObservable(config);
      for (key in _ref) {
        value = _ref[key];
        result[key] = ko.utils.unwrapObservable(value);
      }
      return result;
    };
    makeBindingHandler = function(nodeFactory) {
      return {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
          var config, innerContext, node;
          config = expandConfig(valueAccessor());
          node = nodeFactory(config, element.parentNode);
          innerContext = bindingContext.extend({
            parentNode: node
          });
          ko.applyBindingsToDescendants(innerContext, element);
          if (bindingContext.parentNode) {
            bindingContext.parentNode.add(node);
          }
          if (element.style) {
            element.style.display = 'none';
          }
          element._kk = node;
          return {
            controlsDescendantBindings: true
          };
        },
        update: function(element, valueAccessor) {
          var config, current, key, node, updated, value;
          node = element._kk;
          config = expandConfig(valueAccessor());
          current = node.getAttrs();
          updated = false;
          for (key in config) {
            if (!__hasProp.call(config, key)) continue;
            value = config[key];
            if (value !== current[key]) {
              updated = true;
              break;
            }
          }
          node.setAttrs(config);
          if (updated) {
            if (typeof node.draw === 'function') {
              return node.draw();
            } else {
              if (node.getParent()) {
                return node.getLayer().draw();
              }
            }
          }
        }
      };
    };
    for (nodeType in Kinetic) {
      ctor = Kinetic[nodeType];
      if (!(typeof ctor === 'function')) {
        continue;
      }
      nodeFactory = (function(nodeType, ctor) {
        if (nodeType === 'Stage') {
          return function(config, parent) {
            config['container'] = parent;
            return new ctor(config);
          };
        } else {
          return function(config) {
            return new ctor(config);
          };
        }
      })(nodeType, ctor);
      bindingName = "Kinetic." + nodeType;
      ko.bindingHandlers[bindingName] = makeBindingHandler(nodeFactory);
      ko.virtualElements.allowedBindings[bindingName] = true;
    }
  });

}).call(this);
